{"version":3,"sources":["utils/helperFunctions.js","components/navbar/Navbar.jsx","components/nfts/Nfts.jsx","hooks/useMinterContract.js","hooks/useContract.js","pages/profile/Profile.jsx","pages/Item/Item.jsx","pages/Mint/Mint.jsx","App.js","index.js"],"names":["truncateAddress","address","slice","length","Navbar","useContractKit","destroy","connect","className","to","onClick","href","type","Nfts","title","nfts","loading","defaultAccount","kit","ClipLoader","size","filter","nft","owner","map","index","src","image","alt","useMinterContract","abi","contractAddress","getConnectedKit","useState","contract","setContract","getContract","useCallback","web3","eth","Contract","useEffect","useContract","MinterABI","MinterAddress","Minter","Profile","setNfts","setLoading","getNfts","fetchNftMeta","ipfsUrl","fetch","fetch_meta","json","meta","console","log","e","_nfts","methods","totalSupply","call","nftsLength","i","_nft","Promise","resolve","tokenURI","ownerOf","tokenOwner","tokenData","name","description","push","Number","all","allNft","Item","tokenId","useParams","setTokenOwner","receiver","setReceiver","token","setToken","navigate","useNavigate","nftContract","performActions","fetchNftData","tokenUri","_tokenOwner","giftNft","alert","giftToken","send","from","placeholder","onChange","target","value","Mint","setName","setDescription","setImage","brushColor","setBrushColor","handleSubmit","mintNft","client","Web3Storage","process","formattedName","trim_name","trim","includes","replaceAll","makeFileObjects","file","blob","Blob","JSON","stringify","File","uploadToIPFS","file_name","image_name","put","image_cid","image_url","data","files","file_cid","URI","mint","transaction","Form","onSubmit","style","height","strokeWidth","strokeColor","width","display","justifyContent","marginTop","margin","Button","variant","node","document","querySelector","htmlToImage","then","dataUrl","elem","createElement","setAttribute","body","appendChild","click","remove","catch","error","download","Group","controlId","Label","Control","as","rows","image_file","imageUrl","marginLeft","disabled","App","path","element","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","url","getElementById"],"mappings":"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","file":"static/js/main.4fd4e8e9.chunk.js","sourcesContent":["import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { truncateAddress } from \"../../utils/helperFunctions\";\nimport \"./Navbar.css\";\n\nconst Navbar = () => {\n  const { address, destroy, connect } = useContractKit();\n\n  return (\n    <div className=\"navbar\">\n      <div className=\"navbar-links\">\n        <div className=\"navbar-links_logo\">\n          <Link to=\"/\">\n            <h1>Sketches</h1>\n          </Link>\n        </div>\n        <div className=\"navbar-links_container\">\n          <Link to=\"/\">\n            <p>Home</p>{\" \"}\n          </Link>\n          {address && (\n            <Link to=\"/\">\n              <p onClick={destroy}>Exit</p>\n            </Link>\n          )}\n        </div>\n      </div>\n      <div className=\"navbar-sign\">\n        {!address ? (\n          <>\n            <button type=\"button\" className=\"secondary-btn\" onClick={connect}>\n              Connect\n            </button>\n          </>\n        ) : (\n          <>\n            <a\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n            >\n              <button type=\"button\" className=\"secondary-btn\">\n                {truncateAddress(address)}\n              </button>\n            </a>\n            <Link to=\"/mint\">\n              <button type=\"button\" className=\"primary-btn\">\n                Mint\n              </button>\n            </Link>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./nfts.css\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { Link } from \"react-router-dom\";\nimport { ClipLoader } from \"react-spinners\";\n\nconst Nfts = ({ title, nfts, loading }) => {\n  const { kit } = useContractKit();\n  const { defaultAccount } = kit;\n  return (\n    <div className=\"nfts\">\n      <div className=\"nfts-container\">\n        <div className=\"nfts-container_text\">\n          {!loading && (\n            <h1>{nfts.length < 1 ? \"You don't have any NFT yet\" : title}</h1>\n          )}\n        </div>\n        <div className=\"nfts-container_cards\">\n          {!loading ? (\n            nfts\n              .filter((nft) => nft.owner == defaultAccount)\n              .map((nft) => (\n                <div className=\"nft-card\">\n                  <Link to={`/nft/${nft.index}`}>Expand</Link>\n                  <img src={nft.image} alt=\"\" />\n                </div>\n              ))\n          ) : (\n            <ClipLoader size={50} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Nfts;\n","import { useContract } from \"./useContract\";\nimport MinterABI from \"../contracts/Minter.json\";\nimport MinterAddress from \"../contracts/Minter-address.json\";\n\nexport const useMinterContract = () => {\n  return useContract(MinterABI.abi, MinterAddress.Minter);\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import React, { useEffect, useState } from \"react\";\nimport Nfts from \"../../components/nfts/Nfts\";\nimport { useMinterContract } from \"../../hooks/useMinterContract\";\n\nconst Profile = () => {\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const contract = useMinterContract();\n  useEffect(() => {\n    if (contract) {\n      getNfts();\n    }\n  }, [contract]);\n\n  // get nft metadata from ipfs url\n  const fetchNftMeta = async (ipfsUrl) => {\n    try {\n      if (!ipfsUrl) return null;\n      const fetch_meta = await fetch(ipfsUrl);\n      const meta = await fetch_meta.json();\n      return meta;\n    } catch (e) {\n      console.log({ e });\n    }\n  };\n\n  // get all my NFT\n  const getNfts = async () => {\n    setLoading(true);\n    try {\n      const _nfts = [];\n      const nftsLength = await contract.methods.totalSupply().call();\n      for (let i = 0; i < Number(nftsLength); i++) {\n        const _nft = new Promise(async (resolve) => {\n          const tokenURI = await contract.methods.tokenURI(i).call();\n          const tokenOwner = await contract.methods.ownerOf(i).call();\n          const tokenData = await fetchNftMeta(tokenURI);\n          resolve({\n            index: i,\n            owner: tokenOwner,\n            name: tokenData.name,\n            image: tokenData.image,\n            description: tokenData.description,\n          });\n        });\n        _nfts.push(_nft);\n      }\n      const allNft = await Promise.all(_nfts);\n      setNfts(allNft);\n    } catch (e) {\n      console.log({ e });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"profile\">\n      <Nfts nfts={nfts} loading={loading} title=\"My Tokens\" />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useMinterContract } from \"../../hooks/useMinterContract\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport \"./Item.css\";\n\nconst Item = () => {\n  const { tokenId } = useParams();\n  const [tokenOwner, setTokenOwner] = useState(null);\n  const [receiver, setReceiver] = useState(null);\n  const [token, setToken] = useState({});\n\n  const navigate = useNavigate();\n  const nftContract = useMinterContract();\n  const { performActions, kit } = useContractKit();\n  const { defaultAccount } = kit;\n\n  useEffect(() => {\n    if (nftContract) fetchNftData();\n  }, [nftContract]);\n\n  const fetchNftData = async () => {\n    const tokenUri = await nftContract.methods.tokenURI(tokenId).call();\n    const _tokenOwner = await nftContract.methods.ownerOf(tokenId).call();\n    const fetch_meta = await fetch(tokenUri);\n    const meta = await fetch_meta.json();\n    setToken(meta);\n    setTokenOwner(_tokenOwner);\n  };\n\n  // gift and NFT to another user\n  const giftNft = async () => {\n    if (!receiver) {\n      alert(\"Invalid receiver address entered\");\n      return;\n    }\n    try {\n      await performActions(async (kit) => {\n        await nftContract.methods\n          .giftToken(tokenId, receiver)\n          .send({ from: defaultAccount });\n      });\n      navigate(\"/\");\n    } catch (e) {\n      console.log(\"Error trying to gift out token: \" + e);\n    }\n  };\n\n  return (\n    <div className=\"nft_details\">\n      <div className=\"token-img\">\n        <img src={token.image} />\n      </div>\n      <div className=\"token-details\">\n        <div className=\"tkn-lbl\">Sketch content</div>\n        <div className=\"tkn-det\">{token.name}</div>\n        <div className=\"tkn-lbl\">Sketch Meaning</div>\n        <div className=\"tkn-det\">{token.description}</div>\n      </div>\n      <div className=\"gft-sub\">Gift token to loved one</div>\n      <div className=\"gift-token\">\n        <input\n          type=\"text\"\n          placeholder=\"receiver wallet address\"\n          onChange={(e) => setReceiver(e.target.value)}\n        />{\" \"}\n        <span onClick={() => giftNft()}>Send</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Item;\n","import { useEffect, useState } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useMinterContract } from \"../../hooks/useMinterContract\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as htmlToImage from \"html-to-image\";\nimport { ReactSketchCanvas } from \"react-sketch-canvas\";\nimport \"./Mint.css\";\nimport { Web3Storage } from \"web3.storage/dist/bundle.esm.min.js\";\n\nconst Mint = () => {\n  const [name, setName] = useState(null);\n  const [description, setDescription] = useState(null);\n  const [image, setImage] = useState(null);\n  const [brushColor, setBrushColor] = useState(\"black\");\n\n  const nftContract = useMinterContract();\n  const { address, connect, performActions } = useContractKit();\n  // const { defaultAccount } = kit;\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!address) {\n      (async () => {\n        await connect();\n      })();\n    }\n  }, [address, connect]);\n\n  const isFormFiled = () => {\n    if (image === null || name === null || description === null) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  // Save image to file storage\n  const download = () => {\n    const node = document.querySelector(\".canv\");\n    htmlToImage\n      .toPng(node)\n      .then((dataUrl) => {\n        const elem = document.createElement(\"a\");\n        elem.setAttribute(\"href\", dataUrl);\n        elem.setAttribute(\"download\", \"nft_canvas\");\n        document.body.appendChild(elem);\n        elem.click();\n        elem.remove();\n      })\n      .catch(function (error) {\n        console.error(\"An error as occured\");\n        console.log({ error });\n      });\n  };\n\n  const handleSubmit = async (e) => {\n    await mintNft();\n    alert(\"Token minted successfully!\");\n    navigate(\"/\");\n  };\n\n  const client = new Web3Storage({ token: process.env.REACT_APP_API_TOKEN });\n\n  const formattedName = (name) => {\n    let file_name;\n    const trim_name = name.trim();\n    if (trim_name.includes(\" \")) {\n      file_name = trim_name.replaceAll(\" \", \"%20\");\n      return file_name;\n    } else return trim_name;\n  };\n\n  const makeFileObjects = (file) => {\n    const blob = new Blob([JSON.stringify(file)], { type: \"application/json\" });\n    const files = [new File([blob], `${file.name}.json`)];\n    return files;\n  };\n\n  const uploadToIPFS = async (file) => {\n    if (!file) return;\n    try {\n      const file_name = file[0].name;\n      const image_name = formattedName(file_name);\n      const image_cid = await client.put(file);\n      const image_url = `https://${image_cid}.ipfs.w3s.link/${image_name}`;\n      return image_url;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  };\n\n  // mint an NFT\n  const mintNft = async () => {\n    await performActions(async (kit) => {\n      if (!name || !description || !image) return;\n      const { defaultAccount } = kit;\n\n      // trim any extra whitespaces from the name and\n      // replace the whitespace between the name with %20\n      const file_name = formattedName(name);\n      // convert NFT metadata to JSON format\n      const data = {\n        name,\n        image,\n        description,\n        owner: defaultAccount,\n      };\n\n      try {\n        // save NFT metadata to IPFS\n        const files = makeFileObjects(data);\n        const file_cid = await client.put(files);\n        const URI = `https://${file_cid}.ipfs.w3s.link/${file_name}.json`;\n        console.log(\"Token URI => \" + URI);\n\n        // upload the NFT, mint the NFT and save the IPFS url to the blockchain\n        let transaction = await nftContract.methods\n          .mint(URI)\n          .send({ from: defaultAccount });\n        return transaction;\n      } catch (error) {\n        console.log(\"Error minting token: \", error);\n      }\n    });\n  };\n\n  return (\n    <div className=\"create\">\n      <div className=\"create_form\">Create New NFT</div>\n      <div className=\"form-new\">\n        <div className=\"form-form\">\n          <Form onSubmit={(e) => handleSubmit(e)}>\n            <div className=\"canv\" style={{ height: \"400px\" }}>\n              <ReactSketchCanvas strokeWidth={4} strokeColor={brushColor} />\n            </div>\n\n            <div\n              style={{\n                width: \"100%\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                marginTop: \"10px\",\n              }}\n            >\n              <div>\n                <input\n                  type=\"color\"\n                  onChange={(e) => setBrushColor(e.target.value)}\n                  style={{}}\n                />\n                <span style={{margin: \"10px\"}}>Select color</span>\n              </div>\n              <Button variant=\"dark\" type=\"button\" onClick={() => download()}>\n                Save\n              </Button>\n            </div>\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n              <Form.Label>Sketch Incription</Form.Label>\n              <Form.Control\n                type=\"text\"\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"What did you sketch out?\"\n              />\n            </Form.Group>\n            <Form.Group\n              className=\"mb-3\"\n              controlId=\"exampleForm.ControlTextarea3\"\n            >\n              <Form.Label>Sketch Meaning</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"What does it mean?\"\n                rows={3}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n              <Form.Label>Upload image you just saved</Form.Label>\n              <Form.Control\n                type=\"file\"\n                onChange={async (e) => {\n                  console.log(e.target.files);\n                  const image_file = e.target.files;\n                  console.log(image_file);\n                  const imageUrl = await uploadToIPFS(image_file);\n                  if (!imageUrl) {\n                    alert(\"Failed to upload image\");\n                    return;\n                  }\n                  console.log(imageUrl);\n                  setImage(imageUrl);\n                }}\n              />\n            </Form.Group>\n            <div className=\"mint-btns\">\n              <Button\n                variant=\"dark\"\n                type=\"button\"\n                onClick={() => navigate(\"/\")}\n              >\n                Close\n              </Button>\n\n              <Button\n                style={{ marginLeft: \"auto\" }}\n                disabled={!isFormFiled()}\n                variant=\"dark\"\n                type=\"submit\"\n              >\n                Create\n              </Button>\n            </div>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Mint;\n","import \"./App.css\";\nimport { Navbar } from \"./components\";\nimport { Profile, Item, Mint } from \"./pages\";\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"app__app\">\n      <Router>\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<Profile />} />\n          <Route path=\"nft/:tokenId\" element={<Item />} />\n          <Route path=\"/mint\" element={<Mint />} />\n        </Routes>        \n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Sketches\",\n        description: \"A dapp where you can sketch an image and mint as an NFT\",\n        url: \"https://www.example.com\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}